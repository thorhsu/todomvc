{"version":3,"sources":["actions/actions.js","ccomponents/Header.js","ccomponents/TodoList.js","ccomponents/Filter.js","App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["mapStateToProps","state","mapDispatchToProps","dispatch","newTodo","e","keyCode","type","target","value","changeNewTodo","toggleCompleted","todo","toggleAll","isCompleted","checked","deleteTodo","removeAllCompleted","goEditing","changeTodoNm","event","todoNm","backToView","enter","isEditing","changeFilter","filterCondition","Header","connect","_ref","title","placeholder","newTodoStr","react_default","a","createElement","className","autoFocus","onChange","onKeyUp","todos","filteredTodos","filter","map","idx","key","concat","onDoubleClick","onClick","ref","input","focus","onBlur","href","App","this","props","length","htmlFor","TodoList","Filter","Component","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","cloneState","JSON","parse","stringify","push","id","Object","objectSpread","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65de880b.chunk.js","sourcesContent":["function mapStateToProps(state) {\n  return state;\n}\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    newTodo: (e) => {\n      if(e.keyCode === 13){\n        dispatch({\n          type: 'NEW_TODO',\n          newTodo: e.target.value,\n        });\n      }\n    },\n    changeNewTodo: (e) =>{\n      dispatch({\n        type: 'CHANGE_NEW_TODO',\n        newTodo: e.target.value,\n      });\n    },\n    toggleCompleted: (todo) => {\n      dispatch({\n        type: 'TOGGLE_COMPLETED',\n        todo: todo,\n      });\n    },\n    toggleAll: (e) => {\n      dispatch({\n        type: 'TOGGLE_ALL',\n        isCompleted: e.target.checked,\n      });\n    },\n    deleteTodo: (todo) => {\n      dispatch({\n        type: 'DELETE_TODO',\n        todo: todo,\n      });\n    },\n    removeAllCompleted: () => {\n      dispatch({\n        type: 'REMOVE_ALL_COMPLETED',\n      });\n    },\n    goEditing: (todo) => {\n      dispatch({\n        type: 'GO_EDITING',\n        todo: todo,\n      });\n    },\n    changeTodoNm: (event, todo) => {\n      todo.todoNm = event.target.value;\n      dispatch({\n        type: 'CHANGE_TODO_NM',\n        todo: todo,\n      });\n    },\n    backToView: (event, todo, enter) => {\n      if(!enter || event.keyCode === 13){\n        todo.isEditing = false;\n        dispatch({\n          type: 'BACK_TO_VIEW',\n          todo: todo,\n        });\n      }\n    },\n    changeFilter: (filterCondition) => {\n      dispatch({\n        type: 'CHANGE_FILTER',\n        filterCondition: filterCondition,\n      });\n      \n    },    \n  };\n}\nexport { mapDispatchToProps, mapStateToProps };","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { mapStateToProps, mapDispatchToProps } from '../actions/actions';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(({title, placeholder, newTodoStr, newTodo, changeNewTodo}) => {\n    return (\n        <header className=\"header\" >\n            <h1>{title}</h1>\n            <input className=\"new-todo\" placeholder={ placeholder } value={newTodoStr} autoFocus onChange={changeNewTodo} onKeyUp={newTodo} />\n        </header>\n    );\n});\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { mapStateToProps, mapDispatchToProps } from '../actions/actions';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(({todos, filterCondition, toggleCompleted, deleteTodo, goEditing, changeTodoNm, backToView}) => {\n    let filteredTodos = todos;\n    // eslint-disable-next-line default-case\n    switch(filterCondition){\n        case 'all':\n           break;\n        case 'completed':\n           filteredTodos = todos.filter(todo => todo.isCompleted);\n           break;\n        case 'active':\n           filteredTodos = todos.filter(todo => !todo.isCompleted);\n           break;\n    }\n    return (\n        <ul className=\"todo-list\">\n            { /* These are here just to show the structure of the list items */}\n            { /* List items should get the class `editing` when editing and `completed` when marked as completed */}\n            {\n                filteredTodos.map((todo, idx) => {\n                    return (<li key={`li_${idx}`} className={(todo.isCompleted? 'completed ' : ' ') + (todo.isEditing? 'editing ' : ' ')}>\n                        <div className=\"view\">\n                          <input className=\"toggle\" type=\"checkbox\" checked={todo.isCompleted} onChange={(e) => toggleCompleted(todo)}/>\n                          <label onDoubleClick={(e) => goEditing(todo)} >{todo.todoNm}</label>\n                          <button className=\"destroy\" onClick={(e) => deleteTodo(todo)}></button>\n                        </div>\n                        <input  ref={input => input && input.focus()} className=\"edit\" value={todo.todoNm} \n                            onChange={(e) => changeTodoNm(e, todo)} \n                            onBlur={(e) => backToView(e, todo, false)} \n                            onKeyUp={(e) => backToView(e, todo, true)} />\n                      </li>);\n                })\n            }\n          </ul>\n    );\n});\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { mapStateToProps, mapDispatchToProps } from '../actions/actions';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(({filterCondition, changeFilter}) => {\n    return (\n        <ul className=\"filters\">\n            <li>\n                <a className={filterCondition === 'all'? 'selected' : ''} href=\"#/\" onClick={() => changeFilter('all')} >All</a>\n            </li>\n            <li>\n                <a className={filterCondition === 'active'? 'selected' : ''} href=\"#/active\" onClick={() => changeFilter('active')} >Active</a>\n            </li>\n            <li>\n                <a className={filterCondition === 'completed'? 'selected' : ''} href=\"#/completed\" onClick={() => changeFilter('completed')} >Completed</a>\n            </li>\n        </ul>\n    );\n});\n","import React, { Component } from 'react';\nimport './App.css';\nimport './assets/css/index.css';\nimport './assets/css/base.css';\nimport  Header from './ccomponents/Header';\nimport  TodoList from './ccomponents/TodoList';\nimport  Filter from './ccomponents/Filter';\nimport { connect } from 'react-redux';\nimport { mapStateToProps, mapDispatchToProps } from './actions/actions';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <Header />\n        {/* This section should be hidden by default and shown when there are todos */}\n        <section className=\"main\">\n          { \n            this.props.todos.length > 0?\n               <input className=\"toggle-all\" type=\"checkbox\" onChange={this.props.toggleAll}/> : ''\n          }\n          <label htmlFor=\"toggle-all\" >Mark all as complete</label>\n          <TodoList />\n        </section>\n        { /* This footer should hidden by default and shown when there are todos */}\n        { \n          this.props.todos.length > 0?\n            <footer className=\"footer\">\n              { /*This should be `0 items left` by default */}\n              <span className=\"todo-count\"><strong>{this.props.todos.filter(todo => !todo.isCompleted).length}</strong> item left</span>\n              { /*Remove this if you don't implement routing*/}\n              <Filter />\n              {/* Hidden if no completed items are left */}\n              <button className=\"clear-completed\" onClick={this.props.removeAllCompleted}>Clear completed</button>\n            </footer>\n            :\n            ''\n        }\n      </section>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nconst initialState = {\n  title: 'TodoMVC',\n  placeholder: 'What needs to be done?',\n  todos: [],\n  filterCondition: 'all',\n  newTodoStr: ''\n};\n\nexport default (state = initialState, action) => {\n  // clone state first, avoid mutate original state\n  const cloneState = JSON.parse(JSON.stringify(state));\n  switch (action.type) {\n    case 'NEW_TODO':\n      cloneState.todos.push({\n        id: cloneState.todos.length,\n        isCompleted: false,\n        isEditing: false,\n        todoNm:action.newTodo}\n      );\n      cloneState.newTodoStr = '';\n      return cloneState;\n    case 'CHANGE_NEW_TODO':\n      cloneState.newTodoStr = action.newTodo;\n      return cloneState;\n    case 'TOGGLE_COMPLETED':\n      action.todo.isCompleted = !action.todo.isCompleted;\n      cloneState.todos = cloneState.todos.map(todo => {\n        return (action.todo.id !== todo.id)? todo : action.todo; \n      }); \n      return cloneState;\n    case 'DELETE_TODO':\n      cloneState.todos = cloneState.todos.filter(todo => action.todo.id !== todo.id);\n      return cloneState;\n    case 'TOGGLE_ALL':\n      cloneState.todos = state.todos.map(todo => ({...todo, isCompleted: action.isCompleted}));\n      return cloneState;\n    case 'REMOVE_ALL_COMPLETED':\n      cloneState.todos = state.todos.filter(todo => !todo.isCompleted);\n      return cloneState;\n    case 'GO_EDITING':\n      cloneState.todos = state.todos.map(todo => action.todo.id === todo.id? {...todo, isEditing: true} : todo);\n      return cloneState;\n    case 'CHANGE_TODO_NM':\n      cloneState.todos = state.todos.map(todo => action.todo.id === todo.id? action.todo : todo);\n      return cloneState;\n    case 'BACK_TO_VIEW':\n      cloneState.todos = state.todos.map(todo => action.todo.id === todo.id? action.todo : todo);\n      return cloneState;\n    case 'CHANGE_FILTER':\n      cloneState.filterCondition = action.filterCondition;\n      return cloneState;      \n\n\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers/reducer';\n\n\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n       <App />\n    </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}